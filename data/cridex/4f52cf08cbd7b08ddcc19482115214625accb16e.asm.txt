jmp
retn
pop
retn
idiv
jmp
and
imul
xor
xor
add
jb
fstp
xchg
jmp
add
sbb
and
and
jp
add
adc
pop
lodsb
sub
push
and
sub
and
nop
and
sub
xchg
mov
sub
retf
xor
cmp
pop
retf
push
mov
sbb
or
cmp
mov
out
mov
inc
hlt
lahf
sub
rol
jnz
cmp
jo
fsubr
out
add
retf
dec
xchg
sbb
mov
cmp
jecxz
mov
sub
sub
push
out
and
call
adc
add
retf
mov
sub
in
bound
les
jz
add
pop
mov
xchg
mov
xchg
pop
clc
mov
add
xchg
jmp
pusha
mov
lea
mov
push
jmp
mov
inc
mov
inc
add
jnz
mov
sub
adc
jb
mov
add
jnz
mov
sub
adc
adc
add
jnb
jnz
mov
sub
adc
jnb
xor
sub
jb
shl
mov
inc
xor
jz
mov
add
jnz
mov
sub
adc
adc
add
jnz
mov
sub
adc
adc
jnz
inc
add
jnz
mov
sub
adc
adc
add
jnb
jnz
mov
sub
adc
jnb
add
cmp
adc
lea
cmp
jbe
mov
inc
mov
inc
dec
jnz
jmp
mov
add
mov
add
sub
ja
add
jmp
pop
mov
mov
mov
inc
sub
cmp
ja
cmp
jnz
mov
mov
shr
rol
xchg
sub
sub
add
mov
add
mov
loop
lea
mov
or
jz
mov
lea
add
push
add
call
xchg
mov
inc
or
jz
mov
push
dec
repne
push
call
or
jz
mov
add
jmp
call
mov
lea
mov
push
push
push
push
push
call
lea
and
and
pop
push
push
push
push
push
call
pop
popa
lea
push
cmp
jnz
sub
jmp
